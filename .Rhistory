n <- n+1
}
data <- data[,1:thinness]
yrange <- range(data)+c(-0.1,0.1)
plot(R,data[1,], pch=".", xlab="a", ylab="States",ylim=yrange)
for(i in 2:collect) points(R,data[i,],pch=".")
}
f <- function(x,a) a* cos(x)
bif_diagram(f,alow=0,ahigh=6)
bif_diagram <- function(f=function(x,a) (a*x*(1-x)),alow=0,ahigh=5,
thinness=1000, transient=200, collect=200){
# f function, parameter must be named a
n <- 1
R <- seq(alow,ahigh,length=thinness)
data <- matrix(0,collect,thinness+1)
for(a in R){
x <- runif(1) # random initial condition
## first converge to attractor
for(i in 1:transient){
x <- f(x,a)
} # collect points on attractor
for(i in 1:collect){
x <- f(x,a)
data[i,n] <- x
}
n <- n+1
}
data <- data[,1:thinness]
yrange <- range(data)+c(-0.1,0.1)
plot(R,data[1,], pch=".", xlab="a", ylab="States",ylim=yrange)
for(i in 2:collect) points(R,data[i,],pch=".")
}
f <- function(x,a) a* cos(x)
bif_diagram(f,alow=0,ahigh=15)
bif_diagram <- function(f=function(x,a) (a*x*(1-x)),alow=0,ahigh=5,
thinness=1000, transient=200, collect=200){
# f function, parameter must be named a
n <- 1
R <- seq(alow,ahigh,length=thinness)
data <- matrix(0,collect,thinness+1)
for(a in R){
x <- runif(1) # random initial condition
## first converge to attractor
for(i in 1:transient){
x <- f(x,a)
} # collect points on attractor
for(i in 1:collect){
x <- f(x,a)
data[i,n] <- x
}
n <- n+1
}
data <- data[,1:thinness]
yrange <- range(data)+c(-0.2,0.1)
plot(R,data[1,], pch=".", xlab="a", ylab="States",ylim=yrange)
for(i in 2:collect) points(R,data[i,],pch=".")
}
f <- function(x,a) a* cos(x)
bif_diagram(f,alow=0,ahigh=15)
bif_diagram <- function(f=function(x,a) (a*x*(1-x)),alow=0,ahigh=5,
thinness=1000, transient=200, collect=200){
# f function, parameter must be named a
n <- 1
R <- seq(alow,ahigh,length=thinness)
data <- matrix(0,collect,thinness+1)
for(a in R){
x <- runif(1) # random initial condition
## first converge to attractor
for(i in 1:transient){
x <- f(x,a)
} # collect points on attractor
for(i in 1:collect){
x <- f(x,a)
data[i,n] <- x
}
n <- n+1
}
data <- data[,1:thinness]
yrange <- range(data)+c(-1,0.1)
plot(R,data[1,], pch=".", xlab="a", ylab="States",ylim=yrange)
for(i in 2:collect) points(R,data[i,],pch=".")
}
f <- function(x,a) a* cos(x)
bif_diagram(f,alow=0,ahigh=15)
bif_diagram <- function(f=function(x,a) (a*x*(1-x)),alow=0,ahigh=5,
thinness=1000, transient=200, collect=200){
# f function, parameter must be named a
n <- 0.5
R <- seq(alow,ahigh,length=thinness)
data <- matrix(0,collect,thinness+1)
for(a in R){
x <- runif(1) # random initial condition
## first converge to attractor
for(i in 1:transient){
x <- f(x,a)
} # collect points on attractor
for(i in 1:collect){
x <- f(x,a)
data[i,n] <- x
}
n <- n+1
}
data <- data[,1:thinness]
yrange <- range(data)+c(-1,0.1)
plot(R,data[1,], pch=".", xlab="a", ylab="States",ylim=yrange)
for(i in 2:collect) points(R,data[i,],pch=".")
}
f <- function(x,a) a* cos(x)
bif_diagram(f,alow=0,ahigh=15)
bif_diagram <- function(f=function(x,a) (a*x*(1-x)),alow=0,ahigh=5,
thinness=1000, transient=200, collect=200){
# f function, parameter must be named a
n <- 2
R <- seq(alow,ahigh,length=thinness)
data <- matrix(0,collect,thinness+1)
for(a in R){
x <- runif(1) # random initial condition
## first converge to attractor
for(i in 1:transient){
x <- f(x,a)
} # collect points on attractor
for(i in 1:collect){
x <- f(x,a)
data[i,n] <- x
}
n <- n+1
}
data <- data[,1:thinness]
yrange <- range(data)+c(-1,0.1)
plot(R,data[1,], pch=".", xlab="a", ylab="States",ylim=yrange)
for(i in 2:collect) points(R,data[i,],pch=".")
}
f <- function(x,a) a* cos(x)
bif_diagram(f,alow=0,ahigh=15)
data(mtcars)
data <- data(mtcars)
data
data()
data(BOD)
y <- dnorm(x, mean = 0, sd = 2, log = FALSE)
x <- 2
y <- dnorm(x, mean = 0, sd = 2, log = FALSE)
x <- 22
y <- dnorm(x, mean = 0, sd = 2, log = FALSE)
?seq
x <- (c(seq(1,2, by=4)))
seq(1,2, by=4)
x <- (c(seq(1,11, by=4)))
x
x <- (c(seq(1,100, by=1)))
y <- dnorm(x, mean = 0, sd = 2, log = FALSE)
x <- (c(seq(1,100, by=1)))
y <- dnorm(x, mean = 55, sd = 14, log = FALSE)
x1 <- dnorm(x, mean = 5, sd = 2, log = FALSE)
x2 <- dnorm(x, mean = 4, sd = 1.3, log = FALSE)
data.frame(y,x1,x2)
x3 <- dnorm(x, mean = 6, sd = 0.3, log = FALSE)
lm.all<-lm(y~x1+x2+x3,data=data)
data <- data.frame(y,x1,x2,x3)
lm.all<-lm(y~x1+x2+x3,data=data)
summary(lm.all)
?step
lr.back<-step(lr.all,direction="both" ,test="F")
lr.all<-lm(y~x1+x2+x3,data=data)
summary(lr.all)
lr.back<-step(lr.all,direction="both" ,test="F")
lr.back<-step(lr.all,direction="both" ,test="F")
lr.back<-step(lr.all,direction="both" ,test="F")
library(scatterplot3d)
plot<-scatterplot3d(data,type="h",color="blue",angle=50,scale.y=1.0,pch=12,main="Data")
my.lm<-lm(data$y~data$x1+data$x2)
plot$plane3d(my.lm)
model <-lmer(y ~ x1+x2, data=data)
library(lme4)
model <-lmer(y ~ x1+x2, data=data)
model <-lmer(y ~ x1+x2+(1|x3), data=data)
summary(model)
model_null <-lmer(y ~ x2+(1|x3), data=data)
summary(model_null)
anova(model_null,model)
coef(model)
r.squaredGLMM(model)
library(MuMIn)
r.squaredGLMM(model)
plot(birddatas$y~data$x1,pch=c(data$x3))
legend("topleft",pch=1:2,lwd=2:1,c("a","b"))
library(lattice)
library(nlme)
grd<-groupedData(y~y|x3,,data=data,outer=~x3)
plot(grd, outer=T)
plot(birddatas$y~data$x1,pch=c(data$x3))
legend("topleft",pch=1:2,lwd=2:1,c("a","b"))
library(lattice)
library(nlme)
grd<-groupedData(y~y|x3,,data=data)
plot(grd, outer=T)
qqnorm(normal,main="QQ plot of normal data",pch=19)
qqnorm(data$y,main="QQ plot of normal data",pch=19)
qqnorm(data$y,main="QQ plot of normal data",pch=19)
qqline(normal)
qqnorm(data$y,main="QQ plot of normal data",pch=19)
qqline(data$y)
qqnorm(data$x1,main="QQ plot of normal data",pch=19)
qqline(data$x1)
qqline(data$x1)
qqnorm(data$x2,main="QQ plot of normal data",pch=19)
qqline(data$x2)
qqnorm(data$x3,main="QQ plot of normal data",pch=19)
qqline(data$x3)
x3 <- dnorm(x, mean = 66, sd = 0.3, log = FALSE)
qqnorm(data$x3,main="QQ plot of normal data",pch=19)
qqline(data$x3)
x3 <- dnorm(x, mean = 66, sd = 6, log = FALSE)
qqnorm(data$x3,main="QQ plot of normal data",pch=19)
qqline(data$x3)
data <- data.frame(y,x1,x2,x3)
qqnorm(data$x3,main="QQ plot of normal data",pch=19)
qqline(data$x3)
x3 <- dnorm(x, mean = 66, sd = 1, log = FALSE)
data <- data.frame(y,x1,x2,x3)
qqnorm(data$x3,main="QQ plot of normal data",pch=19)
qqline(data$x3)
x3 <- dnorm(x, mean = 66, sd = 4, log = FALSE)
data <- data.frame(y,x1,x2,x3)
qqnorm(data$x3,main="QQ plot of normal data",pch=19)
qqline(data$x3)
attach(normR)
x3 <- c(1,2,3,4,5,6,7,8,8,8,9,0,0,0,1,2,3,4,5,6,7,8,7,6,5,6,5,4,4,4,4,4,4,4,6,7,3,8,8,)
x3 <- c(1,2,3,4,5,6,7,8,8,8,9,0,0,0,1,2,3,4,5,6,7,8,7,6,5,6,5,4,4,4,4,4,4,4,6,7,3,8,8,3)
qqnorm(x3,main="QQ plot of normal data",pch=19)
qqline(x3)
shapiro.test(x3)
hist(x3,probability=T, main="Histogram of normal
data",xlab="labelApproximately normally distributed data")
lines(density(normal),col=2)
hist(x3,probability=T, main="Histogram of normal
data",xlab="labelApproximately normally distributed data")
lines(density(x3),col=2)
hist(x3,probability=T, main="Histogram of normal
data",xlab="labelApproximately normally distributed data")
lines(density(x3),col=12)
hist(x3,probability=T, main="Histogram of normal
data",xlab="label",breaks=3)
lines(density(x3),col=12)
hist(x3,probability=T, main="Histogram of normal
data",xlab="label",breaks=13)
lines(density(x3),col=12)
hist(x3,probability=T, main="Histogram",xlab="label",breaks=13)
lines(density(x3),col=12)
x2 <- c(x3,x3,x3*1.4,x1)
hist(x2,probability=T, main="Histogram",xlab="label",breaks=13)
lines(density(x2),col=12)
shapiro.test(x2)
qqnorm(x2,main="QQ plot of normal data",pch=19)
qqline(x2)
x2 <- c(x3,x3,x3*1.4)
qqnorm(x2,main="QQ plot of normal data",pch=19)
qqline(x2)
shapiro.test(x2)
hist(x2,probability=T, main="Histogram",xlab="label",breaks=13)
lines(density(x2),col=12)
data %>% select(x1)
library(dplyr)
data %>% select(x1)
library(nlrx)
library(tidyverse)
install.packages("tidyverse")
install.packages("triangle")
install.packages("rstan")
library(tidyverse)
library(triangle)
library(rstan)
rstan_options(auto_write = T)
N <- 18
y <- c(rep(1,12),rep(0,6))
stan_data <- list(N=N, y=Y)
stan_data
N <- 18
y <- c(rep(1,12),rep(0,6))
stan_data <- list(N=N, y=Y)
stan_data <- list(N=N, y=y)
stan_data
stan_data <- list(N=N, y=y)
"
bin_unif_model <- data{
int<lower = 0>N;
int<lower = 0, upper = 1> y[n];
}
parameters{
real<lower = 0, upper = 1> theta;
}
model{
theta ~ uniform(0,1); //prior
y ~ bernoulli(theta); //likelihood
}
"
bin_unif <- stan_model(model_code = bin_unif_model)
bin_unif_model <-
"data{
int<lower = 0>N;
int<lower = 0, upper = 1> y[n];
}
parameters{
real<lower = 0, upper = 1> theta;
}
model{
theta ~ uniform(0,1); //prior
y ~ bernoulli(theta); //likelihood
}
"
bin_unif <- stan_model(model_code = bin_unif_model)
bin_unif_model <-
"data{
int<lower = 0>N;
int<lower = 0, upper = 1> y[N];
}
parameters{
real<lower = 0, upper = 1> theta;
}
model{
theta ~ uniform(0,1); //prior
y ~ bernoulli(theta); //likelihood
}
"
bin_unif <- stan_model(model_code = bin_unif_model)
bin_unif <- stan_model(model_code = bin_unif_model)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
bin_unif <- stan_model(model_code = bin_unif_model)
bin_unif_model <-
"data{
int<lower = 0>N;
int<lower = 0, upper = 1> y[N];
}
parameters{
real<lower = 0, upper = 1> theta;
}
model{
theta ~ uniform(0,1); //prior
y ~ bernoulli(theta); //likelihood
}
"
library(rstan)
bin_unif <- stan_model(model_code = bin_unif_model)
dpois(x= c(1,2,3,4,5), lambda = 4)
plot (dpois(x= c(1,2,3,4,5), lambda = 4))
plot (dpois(x= c(1,2,3,4,5,6,7,8,9), lambda = 4))
plot (dpois(x= c(1,3,4,5,6,7,6,5,4,2,3,4,5,6,7,8,9), lambda = 4))
plot (dpois(x= seq(1,100,1), lambda = 4))
plot (dpois(x= seq(1,40,1), lambda = 4))
plot (dpois(x= seq(1,40,1), lambda = 10))
plot (log(dpois(x= seq(1,40,1), lambda = 10)))
plot(log(dpois(x= seq(1,40,1), lambda = 10)) *
log(dbinom(x = c(1,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,),size =7,prob = 0.6)))
plot(log(dpois(x= seq(1,40,1), lambda = 10)) *
log(dbinom(x = c(1,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5),size =7,prob = 0.6)))
plot(log(dpois(x= seq(1,40,1), lambda = 10) *
dbinom(x = c(1,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5),size =7,prob = 0.6)))
res_birds1_1 <- optim(par = start_var,fn = birds_loglike1, data = data_birds1,
method = "L-BFGS-B", lower = c(0.01,0.1), upper = c(0.9,10),
control = list(fnscale = -1),hessian = TRUE)
start_var <- c(0.1,2)
res_birds1_1 <- optim(par = start_var,fn = birds_loglike1, data = data_birds1,
method = "L-BFGS-B", lower = c(0.01,0.1), upper = c(0.9,10),
control = list(fnscale = -1),hessian = TRUE)
birds_loglike1 <- function(parameter, data){
llpiece <- matrix(rep(NA),nrow = length(data[,1]),ncol = length(data[1,]))
sigma<- rep((NA),length(data[,1]))
product <- matrix(rep(NA),nrow = length(data[,1]),ncol = 20)
for (i in 1:length(data[,1])){
for(n in 1:20){
for (t in 1:length(data[1,])){
llpiece[i,t] <- dbinom(x = data[i,t],size = n, prob=parameter[1])    #  --> Log.L.Function
}
product[i,n] <- prod(llpiece[i,]) *dpois(x = n,lambda = parameter[2])  # --> product of t's (visits)
}
sigma[i]<-log(sum(product[i,]))
}
sum(sigma)
}
res_birds1_1 <- optim(par = start_var,fn = birds_loglike1, data = data_birds1,
method = "L-BFGS-B", lower = c(0.01,0.1), upper = c(0.9,10),
control = list(fnscale = -1),hessian = TRUE)
data_birds1 <- loadRDS("count_data_1.rds")
res_birds1_1 <- optim(par = start_var,fn = birds_loglike1, data = data_birds1,
method = "L-BFGS-B", lower = c(0.01,0.1), upper = c(0.9,10),
control = list(fnscale = -1),hessian = TRUE)
for (i in 1:20){}
for (i in 1:20){print ("i.1"}
for (i in 1:20){print ("i.1")}
for (i in 1:20){print ("i.1","i.2","i.3,"i.4)}
for (i in 1:20){print ("i.1","i.2","i.3,"i.4"")}
for (i in 1:20){print ("i.1","i.2","i.3,"i.4")}
for (i in 1:20){print ("i.1") print("i.2") print("i.3) print("i.4")}
for (i in 1:20){
print ("i.1")
print("i.2")
print("i.3)
print("i.4")
}
for (i in 1:20){
print ("i.1")
print("i.2")
print("i.3")
print("i.4")
}
for (i in 1:20){
print(C(i,"1"))
print("i.2")
print("i.3")
print("i.4")
}
for (i in 1:20){
print(paste0(i,"1"))
print("i.2")
print("i.3")
print("i.4")
}
for (i in 1:20){
print(paste0(i,".1"))
print(paste0(i,".2"))
print(paste0(i,".3"))
print(paste0(i,".4"))
}
install.packages("shiny", "leaflet", "DT", "devtools", "shinyjs", "googlesheets4", "googledrive")
library(leaflet)
setwd("~/Programming/polycarpon")
setwd("~/Programming/polycarpon")
remotes::install_github("ColinFay/geoloc")
library(shiny)
library(leaflet)
library(DT)
library(devtools)
library(shinyjs)
library(googlesheets4)
library(googledrive)
gs4_auth()
library(shiny)
library(leaflet)
server <- function(input, output,session) {
output$lf <- renderLeaflet({
req(input$myBtn_lon)
req(input$myBtn_lat)
# leaflet() %>%
#   addTiles() %>%
#   setView(as.numeric(input$myBtn_lon), as.numeric(input$myBtn_lat), zoom = 17) %>%
#   addMarkers(as.numeric(input$myBtn_lon), as.numeric(input$myBtn_lat))
})
mylocation <- renderText(c(input$myBtn_lon,input$myBtn_lat))
output$location <- mylocation
output$coverage <- renderText({ input$coverage })
output$crack_width <- renderText({ input$crack_width })
sheet <- read_sheet("https://docs.google.com/spreadsheets/d/1mDcGACDd4YCfBl-OWdWDAzRzgFooyMSXUM-08JfrYBY/edit#gid=0")
values <- reactiveValues(countervalue = length(sheet$id)+1,
idList = vector(),
latList = vector(),
longList = vector(),
coverageList = vector(),
widthList = vector(),
coverfromlastList = vector())
output$count <- renderText({values$countervalue})
observeEvent(input$addButton,{
values$idList <- append(isolate(values$idList),values$countervalue)
values$latList <- append(isolate(values$latList),isolate(input$myBtn_lat))
values$longList <- append(isolate(values$longList),isolate(input$myBtn_lon))
values$coverageList <- append(isolate(values$coverageList),isolate(input$coverage))
values$widthList <- append(isolate(values$widthList),isolate(input$crack_width))
values$coverfromlastList <- append(isolate(values$coverfromlastList),isolate(input$cover_from_last))
if(1>0){
data <- data.frame(values$idList,values$latList,values$longList,values$coverageList,values$widthList,values$coverfromlastList)
names(data) <- c("id","latitude","longitude","ind_number","crack_width","from last")
sheet_append(ss,data)
output$table <- renderTable(data)
output$message <- renderText({paste(c("added entry ",values$countervalue - 1, "successfully"))})
values$countervalue <- values$countervalue + 1
output$location <- renderText({""})
updateTextInput(session,"coverage",value = "")
updateTextInput(session,"crack_width",value = "")
}
})
}
library(shiny)
ui <- fluidPage(
tabsetPanel(
tabPanel("New Data",
column(5,subset = 2,
div(id="titlePanel",br(),
titlePanel(h2("Field Observations")),br()),
column(3,subset = 1,fluidRow(verbatimTextOutput("count")),
tags$head(tags$style("#count{color:black; font-size:14px; max-height: 40px; background: white;}")
)),
br(),br(),hr(),
geoloc::button_geoloc("myBtn", "My Location",width = 100),br(),
textOutput("location"),
textInput("coverage","coverage",width = 100),
textInput("crack_width","crack_width",width = 100),
radioButtons("cover_from_last", label = "cover from Last",
choices = c("Low" = "low","Medium" = "medium", "High" = "high")),
actionButton("addButton", "add"),
tags$br(),
div(style="width:200px;",fluidRow(verbatimTextOutput("message")))
)),
tabPanel("collected Data",
fluidRow(
tableOutput("table")))
)
)
library(shiny)
shinyApp(ui, server)
View(server)
ss <- gs4_get("https://docs.google.com/spreadsheets/d/1mDcGACDd4YCfBl-OWdWDAzRzgFooyMSXUM-08JfrYBY/edit#gid=0")
shinyApp(ui, server)
s
